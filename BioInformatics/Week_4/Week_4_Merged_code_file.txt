from BioInformatics.Week_4.c4_11_2_cyclic import cyclo_spectrum
# def bf_cyclopeptide_sequencing(spectrum):
#     peptides = [peptide for peptide in spectrum if mass(peptide) == parent_mass(spectrum)]
#     for peptide in peptides:
#         if spectrum == cyclo_spectrum(peptide):
#             print([peptide])
#
# file=open('data/')
# bf_cyclopeptide_sequencing()
#def counting_peptides(m):
def load_integer_mass_table():
    keys = []
    values = []
    file = open('data/integer_mass_table')
    lines = file.read().splitlines()
    for line in lines:
        k, v = line.split(' ')
        keys.append(k)
        values.append(int(v))
    return keys, values


def cyclo_spectrum(peptide, amino_acid, amino_acid_mass):
    prefix_mass = [0]
    for i in range(0, len(peptide)):
        for j in range(20):
            if amino_acid[j] == peptide[i]:
                prefix_mass.append(prefix_mass[len(prefix_mass)-1]+amino_acid_mass[j])
    peptide_mass = prefix_mass[-1]
    cyclic_spec = [0]
    for i in range(len(prefix_mass)-1):
        for j in range(i+1, len(prefix_mass)):
            cyclic_spec.append(prefix_mass[j] - prefix_mass[i])

            if i>0 and j<len(peptide):
                cyclic_spec.append(peptide_mass - (prefix_mass[j] - prefix_mass[i]))
    return sorted(cyclic_spec)

if __name__ == '__main__':
    peptide_out = 'LEQN'
    amino_acid_out, amino_acid_mass_out = load_integer_mass_table()
    output = cyclo_spectrum(peptide_out, amino_acid_out, amino_acid_mass_out)
    print(' '.join(map(str, output)))
def load_integer_mass_table():
    keys = []
    values = []
    file = open('data/integer_mass_table')
    lines = file.read().splitlines()
    for line in lines:
        k, v = line.split(' ')
        keys.append(k)
        values.append(int(v))
    return keys, values


def linear_spectrum(peptide, amino_acid, amino_acid_mass):
    prefix_mass = [0]
    for i in range(1, len(peptide)):
        for j in range(1, 20):
            if amino_acid[j] == peptide[i]:
                prefix_mass.append(prefix_mass[len(prefix_mass)-1]+amino_acid_mass[j])
    linear_spec = [0]
    for i in range(len(peptide)-1):
        for j in range(i+1, len(peptide)):
            linear_spec.append(prefix_mass[j] - prefix_mass[i])
    return sorted(linear_spec)

if __name__ == '__main__':
    peptide_out = 'FTPLPWIATEMPTM'
    amino_acid_out, amino_acid_mass_out = load_integer_mass_table()
    output = linear_spectrum(peptide_out, amino_acid_out, amino_acid_mass_out)
    print(' '.join(map(str, output)))

# def find_subpeptides(string):
#     ls = []
#     for i in range(len(string)//2):
#         rotated_string = string[i:]+string[:i]
#         for break_point in range(0, len(rotated_string)):
#             if rotated_string[:break_point] != '':
#                 ls.append(rotated_string[:break_point])
#             if rotated_string[break_point:] != '':
#                 ls.append(rotated_string[break_point:])
#     return ls

def find_subpeptides(string):
    bkp = string
    string += string
    ls=[]

    for i in range(len(string)//2):
        for j in range(1,len(string)//2):
            ls.append(string[i:i+j])
    return ls+[bkp]

if __name__ == '__main__':
    string = 'ELEL'
    print(' '.join(sorted(find_subpeptides(string), key=len)))
    #print(len(find_subpeptides(string)))
from BioInformatics.Week_4.q4_4_3 import find_subpeptides

def load_integer_mass_table():
    hm = {}
    file = open('../data/integer_mass_table')
    lines = file.read().splitlines()
    for line in lines:
        k, v = line.split(' ')
        hm[k] = int(v)
    return hm

def theoretical_spectrum(sub_pep_list, mass_table):
    ls=[0]
    ls1=[' ']
    for sub_pep in sub_pep_list:
        sum= 0
        for i in sub_pep:
            sum+=int(mass_table[i])
        ls.append(sum)
        ls1.append([sub_pep])
    return sorted(ls)


if __name__ == '__main__':
    peptide_string_out = 'FTPLPWIATEMPTM'
    sub_pep_list_out = find_subpeptides(peptide_string_out)
    mass_table_out = load_integer_mass_table()
    output = theoretical_spectrum(sub_pep_list_out, mass_table_out)

    formatted_output = ' '.join(map(str,output))

    print(formatted_output)
from BioInformatics.Week_4.q4_4_4 import load_integer_mass_table
from BioInformatics.Week_4.c4_11_2_linear import linear_spectrum


def non_consistent(peptide, spectrum, mass_table):
    return mass(peptide, mass_table) not in spectrum

def mass(peptide, mass_table):
    sum = 0
    for amino_acid in peptide:
        sum += int(mass_table[amino_acid])
    return sum

def expand(peptides, mass_table):
    new_peptide = []
    for peptide in peptides:
        for i in init_pep_out:
            new_peptide.append(i+peptide)
    return new_peptide

def parent_mass(spectrum):
    return spectrum[-1]

def cyclopeptide_sequencing(spectrum, mass_table):
    peptides = set([''])
    amino_acid = [i for i in mass_table]
    amino_acid_mass = [int(mass_table[i]) for i in amino_acid]
    while peptides is not None or peptides != [] or peptides or len(peptides) == 0:
        peptides = expand(peptides, mass_table)
        for pep_idx, peptide in enumerate(peptides[:]):
            if mass(peptide, mass_table) == parent_mass(spectrum):

                if set(linear_spectrum(peptide, amino_acid, amino_acid_mass)) == set(spectrum):
                    print(peptide)
                peptides.remove(peptide)
            elif non_consistent(peptide, spectrum, mass_table):
                peptides.remove(peptide)
        init_pep = peptides

if __name__ == '__main__':
    mass_table_out = load_integer_mass_table()
    spectrum_out = '0 113 128 186 241 299 314 427'
    spectrum_out_list=list(map(int, spectrum_out.split(' ')))
    init_pep_out = [i for i in mass_table_out if mass_table_out[i] in spectrum_out_list]
    cyclopeptide_sequencing(spectrum_out_list, mass_table_out)

from BioInformatics.Week_4.scoring import score
from BioInformatics.Week_4.q4_6_6 import mass, parent_mass, expand

def leaderboard_cyclopeptide_sequencing(spectrum, n):
    leaderboard = set([''])
    leader_peptide = ''
    while leaderboard is not None:
        leaderboard = expand(leaderboard)
        for pep_idx, peptide in enumerate(leaderboard):
            if mass(peptide) == parent_mass(spectrum):
                if score(peptide, spectrum) > score(leader_peptide, spectrum):
                    leader_peptide = peptide
                elif mass(peptide) > parent_mass(spectrum):
                    del leaderboard[pep_idx]
            leaderboard = trim(leaderboard, spectrum, n)
        print(leader_peptide)

def trim(leaderboard, spectrum, n, amino_acid, amino_acid_mass):
    linear_scores = [0 for i in range(1, leaderboard)]
    for j in range(1, leaderboard):
        peptide = leaderboard[j]
        linear_scores[j] = score(peptide, spectrum)
    leaderboard.sort(reversed)
    linear_scores.sort(reversed)
    for j in range(n+1, len(leaderboard)):
        if linear_scores(j) < linear_scores(n):
            del leaderboard[j:]
        return leaderboard
    return leaderboardfrom BioInformatics.Week_4.c4_11_2_cyclic import cyclo_spectrum, load_integer_mass_table


def score(peptide, spectrum):
    spectrum = list(map(int, spectrum.split(' ')))
    ans = 0
    init_spec = cyclo_spectrum(peptide,k,v)
    init_spec.sort()
    i = 0
    j = 0
    while i<len(init_spec) and j<len(spectrum):
        if init_spec[i] == spectrum[j]:
            ans += 1
            i += 1
            j += 1
        else:
            if init_spec[i]<spectrum[j]:
                i += 1
            else:
                j += 1
    return ans

k,v = load_integer_mass_table()
print(score('AGPTTIRPHQWFPREGMKLNAVTPMMCMIQDHRLQEYMKCMSF', '0 57 57 57 71 87 97 97 97 97 99 101 101 103 103 113 113 113 113 114 114 114 115 128 128 128 128 129 129 131 131 131 131 131 131 131 137 137 147 154 156 156 156 163 163 170 185 186 186 188 198 198 204 211 211 213 218 227 228 231 232 234 234 234 234 241 241 244 244 244 246 252 253 253 255 257 259 259 261 265 266 269 269 284 284 285 287 291 292 293 294 294 298 310 312 314 316 317 321 329 342 342 345 347 348 354 355 358 359 362 362 362 365 366 370 372 375 381 382 383 384 386 390 391 397 397 397 397 398 400 406 408 415 420 422 422 423 426 429 439 441 442 443 445 445 449 451 459 468 473 478 479 483 486 490 493 494 495 496 497 499 501 503 505 510 511 512 512 518 521 525 525 525 526 528 533 534 539 540 540 543 546 548 551 551 552 556 557 558 570 576 580 582 590 593 596 598 598 601 604 608 608 614 625 626 627 631 634 639 641 641 649 649 649 652 652 653 654 655 656 656 663 664 668 669 671 672 675 677 677 679 679 689 695 698 703 704 707 710 712 713 714 726 727 730 735 736 738 739 739 743 743 746 752 756 762 765 770 772 778 778 780 780 782 783 784 785 789 790 792 797 799 805 805 807 808 809 811 817 820 826 827 828 832 838 841 842 852 854 857 859 863 867 867 869 872 886 887 889 890 892 893 893 895 896 899 902 902 902 908 909 909 911 912 913 918 921 924 925 934 938 941 946 946 947 948 948 951 956 956 957 960 983 984 985 985 991 996 998 998 999 1000 1004 1005 1015 1017 1019 1022 1022 1023 1024 1024 1024 1026 1026 1030 1031 1039 1039 1043 1049 1049 1049 1051 1053 1055 1058 1072 1072 1074 1076 1077 1082 1085 1088 1093 1095 1097 1098 1098 1101 1112 1113 1113 1121 1122 1127 1133 1133 1136 1136 1146 1146 1147 1150 1152 1153 1153 1161 1162 1170 1171 1174 1180 1180 1180 1182 1184 1185 1187 1188 1196 1197 1200 1202 1203 1203 1204 1209 1209 1212 1218 1219 1221 1226 1230 1235 1244 1247 1247 1249 1250 1256 1260 1260 1261 1264 1264 1267 1268 1269 1277 1277 1283 1283 1290 1293 1300 1302 1303 1304 1306 1308 1308 1310 1311 1316 1316 1317 1319 1321 1331 1331 1333 1334 1340 1340 1344 1347 1347 1357 1358 1361 1363 1374 1375 1377 1380 1382 1382 1390 1391 1395 1401 1403 1405 1405 1406 1407 1407 1411 1414 1416 1419 1419 1421 1431 1434 1434 1437 1439 1439 1444 1446 1447 1450 1452 1458 1459 1460 1462 1471 1473 1477 1488 1488 1490 1494 1495 1496 1500 1503 1503 1504 1508 1508 1508 1510 1518 1519 1521 1530 1532 1536 1538 1542 1542 1547 1548 1550 1550 1553 1557 1561 1565 1565 1572 1574 1575 1575 1581 1582 1589 1590 1593 1595 1600 1602 1603 1605 1606 1610 1614 1616 1616 1619 1623 1624 1625 1627 1629 1632 1632 1639 1645 1647 1647 1652 1667 1668 1670 1673 1674 1675 1678 1678 1678 1686 1686 1692 1694 1696 1699 1701 1703 1703 1703 1713 1713 1720 1721 1724 1725 1726 1728 1728 1729 1730 1731 1731 1737 1743 1743 1744 1747 1754 1760 1761 1761 1761 1764 1765 1781 1782 1788 1788 1799 1800 1801 1801 1802 1804 1809 1810 1811 1816 1817 1823 1825 1828 1829 1834 1836 1841 1843 1844 1848 1848 1850 1852 1856 1856 1858 1858 1859 1859 1860 1860 1865 1874 1879 1887 1890 1891 1896 1900 1901 1912 1912 1913 1914 1916 1916 1924 1926 1931 1931 1935 1940 1941 1944 1945 1947 1947 1948 1955 1956 1957 1961 1964 1965 1969 1972 1972 1972 1974 1977 1979 1980 1981 1987 1989 1990 1996 1999 2002 2010 2013 2014 2015 2023 2026 2029 2029 2034 2043 2045 2045 2047 2048 2054 2055 2058 2059 2069 2069 2075 2075 2075 2077 2078 2078 2082 2086 2088 2093 2093 2094 2096 2100 2104 2108 2109 2111 2111 2111 2115 2118 2121 2123 2127 2128 2144 2146 2146 2150 2152 2154 2157 2157 2158 2160 2162 2165 2165 2172 2172 2172 2179 2183 2185 2193 2203 2206 2206 2206 2208 2210 2211 2217 2221 2224 2224 2224 2225 2225 2229 2233 2233 2234 2242 2242 2243 2245 2249 2249 2251 2254 2255 2258 2260 2265 2268 2279 2282 2286 2286 2286 2288 2293 2293 2294 2296 2300 2303 2309 2319 2321 2330 2334 2339 2339 2341 2342 2345 2346 2348 2352 2353 2355 2355 2355 2355 2355 2357 2357 2359 2362 2362 2362 2365 2366 2380 2380 2385 2386 2389 2390 2396 2399 2399 2405 2406 2407 2417 2417 2423 2424 2431 2433 2440 2449 2452 2456 2456 2456 2456 2458 2467 2468 2470 2474 2474 2477 2477 2480 2483 2486 2486 2486 2490 2493 2497 2499 2499 2502 2504 2504 2504 2508 2508 2511 2513 2516 2518 2520 2520 2520 2527 2527 2527 2537 2537 2553 2554 2570 2570 2580 2580 2580 2587 2587 2587 2589 2591 2594 2596 2599 2599 2603 2603 2603 2605 2608 2608 2610 2614 2617 2621 2621 2621 2624 2627 2630 2630 2633 2633 2637 2639 2640 2649 2651 2651 2651 2651 2655 2658 2667 2674 2676 2683 2684 2690 2690 2700 2701 2702 2708 2708 2711 2717 2718 2721 2722 2727 2727 2741 2742 2745 2745 2745 2748 2750 2750 2752 2752 2752 2752 2752 2754 2755 2759 2761 2762 2765 2766 2768 2768 2773 2777 2786 2788 2798 2804 2807 2811 2813 2814 2814 2819 2821 2821 2821 2825 2828 2839 2842 2847 2849 2852 2853 2856 2858 2858 2862 2864 2865 2865 2873 2874 2874 2878 2882 2882 2883 2883 2883 2886 2890 2896 2897 2899 2901 2901 2901 2904 2914 2922 2924 2928 2935 2935 2935 2942 2942 2945 2947 2949 2950 2950 2953 2955 2957 2961 2961 2963 2979 2980 2984 2986 2989 2992 2996 2996 2996 2998 2999 3003 3007 3011 3013 3014 3014 3019 3021 3025 3029 3029 3030 3032 3032 3032 3038 3038 3048 3049 3052 3053 3059 3060 3062 3062 3064 3073 3078 3078 3081 3084 3092 3093 3094 3097 3105 3108 3111 3117 3118 3120 3126 3127 3128 3130 3133 3135 3135 3135 3138 3142 3143 3146 3150 3151 3152 3159 3160 3160 3162 3163 3166 3167 3172 3176 3176 3181 3183 3191 3191 3193 3194 3195 3195 3206 3207 3211 3216 3217 3220 3228 3233 3242 3247 3247 3248 3248 3249 3249 3251 3251 3255 3257 3259 3259 3263 3264 3266 3271 3273 3278 3279 3282 3284 3290 3291 3296 3297 3298 3303 3305 3306 3306 3307 3308 3319 3319 3325 3326 3342 3343 3346 3346 3346 3347 3353 3360 3363 3364 3364 3370 3376 3376 3377 3378 3379 3379 3381 3382 3383 3386 3387 3394 3394 3404 3404 3404 3406 3408 3411 3413 3415 3421 3421 3429 3429 3429 3432 3433 3434 3437 3439 3440 3455 3460 3460 3462 3468 3475 3475 3478 3480 3482 3483 3484 3488 3491 3491 3493 3497 3501 3502 3504 3505 3507 3512 3514 3517 3518 3525 3526 3532 3532 3533 3535 3542 3542 3546 3550 3554 3557 3557 3559 3560 3565 3565 3569 3571 3575 3577 3586 3588 3589 3597 3599 3599 3599 3603 3604 3604 3607 3611 3612 3613 3617 3619 3619 3630 3634 3636 3645 3647 3648 3649 3655 3657 3660 3661 3663 3668 3668 3670 3673 3673 3676 3686 3688 3688 3691 3693 3696 3700 3700 3701 3702 3702 3704 3706 3712 3716 3717 3725 3725 3727 3730 3732 3733 3744 3746 3749 3750 3760 3760 3763 3767 3767 3773 3774 3776 3776 3786 3788 3790 3791 3791 3796 3797 3799 3799 3801 3803 3804 3805 3807 3814 3817 3824 3824 3830 3830 3838 3839 3840 3843 3843 3846 3847 3847 3851 3857 3858 3860 3860 3863 3872 3877 3881 3886 3888 3889 3895 3898 3898 3903 3904 3904 3905 3907 3910 3911 3919 3920 3922 3923 3925 3927 3927 3927 3933 3936 3937 3945 3946 3954 3954 3955 3957 3960 3961 3961 3971 3971 3974 3974 3980 3985 3986 3994 3994 3995 4006 4009 4009 4010 4012 4014 4019 4022 4025 4030 4031 4033 4035 4035 4049 4052 4054 4056 4058 4058 4058 4064 4068 4068 4076 4077 4081 4081 4083 4083 4083 4084 4085 4085 4088 4090 4092 4102 4103 4107 4108 4109 4109 4111 4116 4122 4122 4123 4124 4147 4150 4151 4151 4156 4159 4159 4160 4161 4161 4166 4169 4173 4182 4183 4186 4189 4194 4195 4196 4198 4198 4199 4205 4205 4205 4208 4211 4212 4214 4214 4215 4217 4218 4220 4221 4235 4238 4240 4240 4244 4248 4250 4253 4255 4265 4266 4269 4275 4279 4280 4281 4287 4290 4296 4298 4299 4300 4302 4302 4308 4310 4315 4317 4318 4322 4323 4324 4325 4327 4327 4329 4329 4335 4337 4342 4345 4351 4355 4361 4364 4364 4368 4368 4369 4371 4372 4377 4380 4381 4393 4394 4395 4397 4400 4403 4404 4409 4412 4418 4428 4428 4430 4430 4432 4435 4436 4438 4439 4443 4444 4451 4451 4452 4453 4454 4455 4455 4458 4458 4458 4466 4466 4468 4473 4476 4480 4481 4482 4493 4499 4499 4503 4506 4509 4509 4511 4514 4517 4525 4527 4531 4537 4549 4550 4551 4555 4556 4556 4559 4561 4564 4567 4567 4568 4573 4574 4579 4581 4582 4582 4582 4586 4589 4595 4595 4596 4597 4602 4604 4606 4608 4610 4611 4612 4613 4614 4617 4621 4624 4628 4629 4634 4639 4648 4656 4658 4662 4662 4664 4665 4666 4668 4678 4681 4684 4685 4685 4687 4692 4699 4701 4707 4709 4710 4710 4710 4710 4716 4717 4721 4723 4724 4725 4726 4732 4735 4737 4741 4742 4745 4745 4745 4748 4749 4752 4753 4759 4760 4762 4765 4765 4778 4786 4790 4791 4793 4795 4797 4809 4813 4813 4814 4815 4816 4820 4822 4823 4823 4838 4838 4841 4842 4846 4848 4848 4850 4852 4854 4854 4855 4861 4863 4863 4863 4866 4866 4873 4873 4873 4873 4875 4876 4879 4880 4889 4894 4896 4896 4903 4909 4909 4919 4921 4921 4922 4937 4944 4944 4951 4951 4951 4953 4960 4970 4970 4976 4976 4976 4976 4976 4976 4976 4978 4978 4979 4979 4979 4979 4992 4993 4993 4993 4994 4994 4994 4994 5004 5004 5006 5006 5008 5010 5010 5010 5010 5020 5036 5050 5050 5050 5107'))def spec_convolution(spectrum):
    for i in spectrum:
        for j in spectrum:
            if (i-j)>0:
                print(i-j, end=' ')


spectrum = '700 876 771 512 113 113 589 517 115 404 271 276 415 131 632 702 948 220 863 57 587 991 756 1104 643 228 976 592 976 461 333 0 259 635 163 919 241 384 469 316 689 530 185 884 828 515 402 989 643 472 720 973 461 354 941 348 479 287 750 833 625 1047 356 788 128 574 128 241 156 817 991 748 845 863'
spectrum = list(map(int, spectrum.split(' ')))
spec_convolution(spectrum)